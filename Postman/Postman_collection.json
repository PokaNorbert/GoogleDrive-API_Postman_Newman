{
	"info": {
		"_postman_id": "c76283a4-334e-4063-a52e-b7e67e1867be",
		"name": "JPG Files in Google Drive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33907049"
	},
	"item": [
		{
			"name": "Get-Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nextPageToken');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('incompleteSearch');",
							"    pm.expect(responseData).to.have.property('files');",
							"});",
							"",
							"",
							"pm.test(\"Files array should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.files).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Each file in the files array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.files).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file).to.have.property('kind').that.is.a('string');",
							"        pm.expect(file).to.have.property('mimeType').that.is.a('string');",
							"        pm.expect(file).to.have.property('id').that.is.a('string');",
							"        pm.expect(file).to.have.property('name').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate response schema\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nextPageToken');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('incompleteSearch');",
							"    pm.expect(responseData).to.have.property('files').that.is.an('array');",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file).to.have.property('kind');",
							"        pm.expect(file).to.have.property('mimeType');",
							"        pm.expect(file).to.have.property('id');",
							"        pm.expect(file).to.have.property('name');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"NextPageToken, Kind, and IncompleteSearch are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('nextPageToken', 'kind', 'incompleteSearch');",
							"});",
							"",
							"",
							"pm.test(\"Each file in the 'files' array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    ",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file).to.have.property('kind').that.is.a('string');",
							"        pm.expect(file).to.have.property('mimeType').that.is.a('string');",
							"        pm.expect(file).to.have.property('id').that.is.a('string');",
							"        pm.expect(file).to.have.property('name').that.is.a('string');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "tokenName",
							"value": "JPG-Token",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.googleapis.com/drive/v3/files",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"drive",
						"v3",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple-upload-file-binary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.kind).to.be.a('string');",
							"  pm.expect(responseData.id).to.be.a('string');",
							"  pm.expect(responseData.name).to.be.a('string');",
							"  pm.expect(responseData.mimeType).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Kind is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.kind).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Kind should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Kind is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.kind).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Mimetype is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/Szabo/Downloads/postmantesticon.png"
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=media",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "media"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple-upload-file-formdata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.match(/^[a-zA-Z]+\\/[a-zA-Z]+$/);",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.include.all.keys('kind', 'id', 'name', 'mimeType');",
							"});",
							"",
							"",
							"pm.test(\"ID is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.match(/[a-zA-Z0-9_-]+/);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/postmantesticon.png"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=media",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "media"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('kind', 'id', 'name', 'mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Mimetype is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Kind is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.kind).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Kind should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"MimeType should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\" : \"postmantesticon.png\",\r\n\t\"description\" : \"This is a picture\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-formdataJS-withoutPNG",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.kind).to.exist;",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.mimeType).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Mimetype should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Mimetype should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=UTF-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "metadata",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/postmantesticonFORM.json"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-formdataJS-withPNG",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('kind', 'id', 'name', 'mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "metadata",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/postmantesticonFORM.json"
						},
						{
							"key": "",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/postmantesticon.png"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Resumable-JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('fileId');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"    pm.expect(responseData).to.have.property('createdTime');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\" : \"postmannewimage.png\",\r\n\t\"description\" : \"This is a new picture\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "resumable"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Resumable-upload-file-binary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.match(/[a-zA-Z\\s]+/);",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/Szabo/Downloads/postmannewimage.png"
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable&access_token=ya29.a0AXooCgvC7aoHKXORpFd9xJY6eLhmovAmUWdQd0wvqJmaZqITjf0FU1_m_2x6DSevK5iKgvpafBVQY2vNVqgMViCSaFKIaNTTmKHl-D12-tAKJz0426woQ9f9kbYHdYsgjkOdN94C0Q7d1coMYKVGEM0ux0lKgjzSD-AaCgYKAR8SARISFQHGX2MiMR4EZusa5hPTk9RLgJmjQw0170&upload_id=ABPtcPoq3wqcqtJs1Ja0h39v_yhoZKlsTnUrShLCDZiYGyad3I34AZo2vtA0qXWvURRObloLL5SARavQ-iU75QjU-Q_gY-aw08TIgXrsLG5Zlida&session_crd=AHSoBRWIRKdXfio74z8LxBC0mlXo8_ICh4znWeS-C8zXKNGZAznfYB9prBcCsKCqn12w0Lfc6NDk_DAgce0",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "resumable"
						},
						{
							"key": "access_token",
							"value": "ya29.a0AXooCgvC7aoHKXORpFd9xJY6eLhmovAmUWdQd0wvqJmaZqITjf0FU1_m_2x6DSevK5iKgvpafBVQY2vNVqgMViCSaFKIaNTTmKHl-D12-tAKJz0426woQ9f9kbYHdYsgjkOdN94C0Q7d1coMYKVGEM0ux0lKgjzSD-AaCgYKAR8SARISFQHGX2MiMR4EZusa5hPTk9RLgJmjQw0170"
						},
						{
							"key": "upload_id",
							"value": "ABPtcPoq3wqcqtJs1Ja0h39v_yhoZKlsTnUrShLCDZiYGyad3I34AZo2vtA0qXWvURRObloLL5SARavQ-iU75QjU-Q_gY-aw08TIgXrsLG5Zlida"
						},
						{
							"key": "session_crd",
							"value": "AHSoBRWIRKdXfio74z8LxBC0mlXo8_ICh4znWeS-C8zXKNGZAznfYB9prBcCsKCqn12w0Lfc6NDk_DAgce0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete-file",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Export-Token",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": []
			},
			"response": []
		}
	]
}
{
	"info": {
		"_postman_id": "e1f53a58-1e05-4fa1-943c-bef4eaf75e5e",
		"name": "DOCX Files in Google Drive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33907049"
	},
	"item": [
		{
			"name": "Get-Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nextPageToken');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('incompleteSearch');",
							"    pm.expect(responseData).to.have.property('files');",
							"});",
							"",
							"",
							"pm.test(\"Files array should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.files).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Each file in the files array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.files).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file).to.have.property('kind').that.is.a('string');",
							"        pm.expect(file).to.have.property('mimeType').that.is.a('string');",
							"        pm.expect(file).to.have.property('id').that.is.a('string');",
							"        pm.expect(file).to.have.property('name').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "tokenName",
							"value": "JPG-Token",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.googleapis.com/drive/v3/files",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"drive",
						"v3",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple-upload-file-binary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/Szabo/Downloads/Fruits.docx"
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=media",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "media"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple-upload-file-formdata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.match(/^[a-zA-Z]+\\/[a-zA-Z]+$/);",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.include.all.keys('kind', 'id', 'name', 'mimeType');",
							"});",
							"",
							"",
							"pm.test(\"ID is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.match(/[a-zA-Z0-9_-]+/);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/Fruits.docx"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=media",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "media"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('kind', 'id', 'name', 'mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Mimetype is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\" : \"Fruits.docx\",\r\n\t\"description\" : \"This is a document\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-formdataJS-withoutDOCX",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.kind).to.exist;",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.mimeType).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Mimetype should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Mimetype should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=UTF-8"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "metadata",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/documentFORM.json"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-formdataJS-withDOCX",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "metadata",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/documentFORM.json"
						},
						{
							"key": "",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/Fruits.docx"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Resumable-JSON",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\" : \"Fruits.docx\",\r\n\t\"description\" : \"This is a document\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "resumable"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Resumable-upload-file-binary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.match(/[a-zA-Z\\s]+/);",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.mimeType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/Szabo/Downloads/Fruits.docx"
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable&access_token=ya29.a0AXooCguBqlIDCwMJtENteMobv8wWZFe_DrYWHMKkw-AXU63IR-1evEofsvKnZ1fGDqQaqS9jMoyq2SWO81DP9B45cmJ6o-1C1whZzH6_Z5vQmVyapRFZAc41SVA3FKkN_3EY9FtkCE5NppexVfAZDL3XPZ6utcMbHM8aCgYKAe0SARISFQHGX2Mir9KqPv6Il10HbnL2tCPuyQ0170&upload_id=ABPtcPrQUf7J-G4y3euGHYoHnrKPhMMYkMXXCfBO4zoJMBrX2FQ3c-wvAQ5ZadN5pF11LDslbxoevu5TJh8SjwOzvJWBfAVngCRzu6a3muIjuIYDuQ&session_crd=AHSoBRU7uzapyhgdosceYOsLeytB_x-rBY5mMcHvy0EnQXfDcZ8Hw6Zzt4j_zQNzq0sXsKv7euPh4RBSt0Y",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "resumable"
						},
						{
							"key": "access_token",
							"value": "ya29.a0AXooCguBqlIDCwMJtENteMobv8wWZFe_DrYWHMKkw-AXU63IR-1evEofsvKnZ1fGDqQaqS9jMoyq2SWO81DP9B45cmJ6o-1C1whZzH6_Z5vQmVyapRFZAc41SVA3FKkN_3EY9FtkCE5NppexVfAZDL3XPZ6utcMbHM8aCgYKAe0SARISFQHGX2Mir9KqPv6Il10HbnL2tCPuyQ0170"
						},
						{
							"key": "upload_id",
							"value": "ABPtcPrQUf7J-G4y3euGHYoHnrKPhMMYkMXXCfBO4zoJMBrX2FQ3c-wvAQ5ZadN5pF11LDslbxoevu5TJh8SjwOzvJWBfAVngCRzu6a3muIjuIYDuQ"
						},
						{
							"key": "session_crd",
							"value": "AHSoBRU7uzapyhgdosceYOsLeytB_x-rBY5mMcHvy0EnQXfDcZ8Hw6Zzt4j_zQNzq0sXsKv7euPh4RBSt0Y"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete-file",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Export-Token",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": []
			},
			"response": []
		}
	]
}
{
	"info": {
		"_postman_id": "84ce7103-8be9-47c8-acb2-617ce145fa12",
		"name": "MP3 Files in Google Drive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33907049"
	},
	"item": [
		{
			"name": "Get-Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nextPageToken');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('incompleteSearch');",
							"    pm.expect(responseData).to.have.property('files');",
							"});",
							"",
							"",
							"pm.test(\"Validate the files array and its elements\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.files).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"  ",
							"  responseData.files.forEach(function(file) {",
							"    pm.expect(file).to.be.an('object');",
							"    pm.expect(file.kind).to.exist.and.to.be.a('string');",
							"    pm.expect(file.mimeType).to.exist.and.to.be.a('string');",
							"    pm.expect(file.id).to.exist.and.to.be.a('string');",
							"    pm.expect(file.name).to.exist.and.to.be.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Mimetype is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.files).to.be.an('array');",
							"  responseData.files.forEach(function(file) {",
							"    pm.expect(file.mimeType).to.be.a('string').and.to.match(/^[a-zA-Z0-9\\-]+\\/[a-zA-Z0-9\\-\\+\\.]+$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Name field in the files array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.files).to.be.an('array');",
							"    ",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body schema validation\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nextPageToken');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('incompleteSearch');",
							"    pm.expect(responseData).to.have.property('files').that.is.an('array');",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file).to.have.property('kind');",
							"        pm.expect(file).to.have.property('mimeType');",
							"        pm.expect(file).to.have.property('id');",
							"        pm.expect(file).to.have.property('name');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body schema validation\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('nextPageToken');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('incompleteSearch');",
							"  pm.expect(responseData).to.have.property('files').that.is.an('array');",
							"  responseData.files.forEach(function(file) {",
							"    pm.expect(file).to.have.property('kind');",
							"    pm.expect(file).to.have.property('mimeType');",
							"    pm.expect(file).to.have.property('id');",
							"    pm.expect(file).to.have.property('name');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "tokenName",
							"value": "MP3-Token",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.googleapis.com/drive/v3/files",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"drive",
						"v3",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple-upload-file-binary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Kind field exists in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.kind).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id field in the response should exist\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Name field in the response should exist\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.name).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"MIME type field exists and is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.exist.and.to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response schema validation for kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind').that.is.a('string');",
							"    pm.expect(responseData).to.have.property('id').that.is.a('string');",
							"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
							"    pm.expect(responseData).to.have.property('mimeType').that.is.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/Szabo/Downloads/Lidia Buble-Buzele Tale.mp3"
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=media",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "media"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple-upload-file-formdata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a valid MIME type\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.match(/^[-\\w]+\\/[-\\w\\+]+$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/Lidia Buble-Buzele Tale.mp3"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=media",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "media"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Name should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\" : \"Lidia Buble-Buzele Tale\",\r\n\t\"description\" : \"This is a media file\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-formdataJS-withoutMP3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.include.all.keys('kind', 'id', 'name', 'mimeType');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "metadata",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/mediafileFORM.json"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Multipart-upload-file-formdataJS-withMP3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('kind');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a valid MIME type\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.match(/^[a-z]+\\/[a-z0-9\\-\\.\\+]+$/i, \"Invalid MIME type\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "metadata",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/mediafileFORM.json"
						},
						{
							"key": "",
							"type": "file",
							"src": "/C:/Users/Szabo/Downloads/Lidia Buble-Buzele Tale.mp3"
						}
					]
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "multipart"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Resumable-JSON",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\" : \"Lidia Buble-Buzele Tale.mp3\",\r\n\t\"description\" : \"This is a media file\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "resumable"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Resumable-upload-file-binary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - kind, id, name, and mimeType\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('mimeType');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"MimeType is a valid MIME type format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.mimeType).to.match(/^[a-z]+\\/[a-z0-9-]+$/i, \"Invalid MIME type format\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Google Drive API-Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "/C:/Users/Szabo/Downloads/Lidia Buble-Buzele Tale.mp3"
					}
				},
				"url": {
					"raw": "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable&access_token=ya29.a0AXooCgsaq_DSfSF4ZOWhDMyTFIKNbB4a6nrylYRU2H1AVthwZAyNNA4rfUCdW9Z7yiytrD1DTztGwKL2oA-PElwAoO0J40SXG-4g_Q4n-FIOxSGtOAjjx-GZNCXugUj4L30HXqmoEzMaPXmWNxR5nKuRyugX5P6q4FEaCgYKATsSARISFQHGX2MiE1D3JwV944YPO5LtlY9RjA0170&upload_id=ABPtcPof5Cqt6eDFeoiNSFVGV7P5agGjsBf1xPvsY8mledlknrje0Yt3tGHRXpaZi9LI_8ujdn_B-ZI7iOxjCmiaM4fVrRHHmqonVYy9ykeGhXqG2Q&session_crd=AHSoBRVk92lehdkkoivRMvaBd8gh9D4m3r-UnjD6vmvINnKlCywD3XBBFf-KDfy5w8mVRdAZKyFZR_l8QAI",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"upload",
						"drive",
						"v3",
						"files"
					],
					"query": [
						{
							"key": "uploadType",
							"value": "resumable"
						},
						{
							"key": "access_token",
							"value": "ya29.a0AXooCgsaq_DSfSF4ZOWhDMyTFIKNbB4a6nrylYRU2H1AVthwZAyNNA4rfUCdW9Z7yiytrD1DTztGwKL2oA-PElwAoO0J40SXG-4g_Q4n-FIOxSGtOAjjx-GZNCXugUj4L30HXqmoEzMaPXmWNxR5nKuRyugX5P6q4FEaCgYKATsSARISFQHGX2MiE1D3JwV944YPO5LtlY9RjA0170"
						},
						{
							"key": "upload_id",
							"value": "ABPtcPof5Cqt6eDFeoiNSFVGV7P5agGjsBf1xPvsY8mledlknrje0Yt3tGHRXpaZi9LI_8ujdn_B-ZI7iOxjCmiaM4fVrRHHmqonVYy9ykeGhXqG2Q"
						},
						{
							"key": "session_crd",
							"value": "AHSoBRVk92lehdkkoivRMvaBd8gh9D4m3r-UnjD6vmvINnKlCywD3XBBFf-KDfy5w8mVRdAZKyFZR_l8QAI"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete-file",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Export-Token",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": []
			},
			"response": []
		}
	]
}
{
	"info": {
		"_postman_id": "23aa4ffd-7a6d-45a9-8a3e-d89387473ffc",
		"name": "Export Files from Google Drive",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33907049"
	},
	"item": [
		{
			"name": "Get-Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nextPageToken');",
							"    pm.expect(responseData).to.have.property('kind');",
							"    pm.expect(responseData).to.have.property('incompleteSearch');",
							"    pm.expect(responseData).to.have.property('files');",
							"});",
							"",
							"",
							"pm.test(\"Files array should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.files).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Each file in the files array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.files).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.files.forEach(function(file) {",
							"        pm.expect(file).to.have.property('kind').that.is.a('string');",
							"        pm.expect(file).to.have.property('mimeType').that.is.a('string');",
							"        pm.expect(file).to.have.property('id').that.is.a('string');",
							"        pm.expect(file).to.have.property('name').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Export-Token",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.googleapis.com/drive/v3/files",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"drive",
						"v3",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Export-Token",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.googleapis.com/drive/v3/files/1F_JNNucNfij6z5jJSPzm40iah4zpPdCl/export",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"drive",
						"v3",
						"files",
						"1F_JNNucNfij6z5jJSPzm40iah4zpPdCl",
						"export"
					]
				}
			},
			"response": []
		}
	]
}
{
	"info": {
		"_postman_id": "05f6229b-699a-4c1f-a2be-6fb693474054",
		"name": "Empty Trash",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33907049"
	},
	"item": [
		{
			"name": "Get-Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.nextPageToken).to.exist;\r",
							"    pm.expect(responseData.kind).to.exist;\r",
							"    pm.expect(responseData.incompleteSearch).to.exist;\r",
							"    pm.expect(responseData.files).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each file in the 'files' array contains the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.files).to.be.an('array');\r",
							"\r",
							"    responseData.files.forEach(function (file) {\r",
							"        pm.expect(file).to.have.property('kind');\r",
							"        pm.expect(file).to.have.property('mimeType');\r",
							"        pm.expect(file).to.have.property('id');\r",
							"        pm.expect(file).to.have.property('name');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Next page token must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('nextPageToken').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Kind must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('kind').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Delete-Token",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.googleapis.com/drive/v3/files",
					"protocol": "https",
					"host": [
						"www",
						"googleapis",
						"com"
					],
					"path": [
						"drive",
						"v3",
						"files"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete-Files",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.readonly",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "998286736869-bq4g66mdk17to6lga926b7l7tc62q9fl.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Export-Token",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://oauth2.googleapis.com/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "refreshRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "tokenRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "authRequestParams",
							"value": [],
							"type": "any"
						},
						{
							"key": "challengeAlgorithm",
							"value": "S256",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://drive.google.com/drive/trash",
					"protocol": "https",
					"host": [
						"drive",
						"google",
						"com"
					],
					"path": [
						"drive",
						"trash"
					]
				}
			},
			"response": []
		}
	]
}
